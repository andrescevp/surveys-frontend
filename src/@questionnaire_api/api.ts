/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseQuestionnaire
 */
export interface BaseQuestionnaire {
    /**
     * Code to identify the questionnaires
     * @type {string}
     * @memberof BaseQuestionnaire
     */
    'code': string;
    /**
     * BaseQuestionnaire title
     * @type {string}
     * @memberof BaseQuestionnaire
     */
    'title': string;
    /**
     * BaseQuestionnaire alternative title
     * @type {string}
     * @memberof BaseQuestionnaire
     */
    'alt_title'?: string;
    /**
     * BaseQuestionnaire description
     * @type {string}
     * @memberof BaseQuestionnaire
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ChildrenInner>}
     * @memberof BaseQuestionnaire
     */
    'children'?: Array<ChildrenInner>;
}
/**
 * @type ChildrenInner
 * @export
 */
export type ChildrenInner = { type: 'iterate' } & Iterate | { type: 'numeric' } & NumericQuestion | { type: 'selection' } & SelectionQuestion | { type: 'set' } & SetOfElements | { type: 'text' } & TextQuestion;

/**
 * 
 * @export
 * @interface Column
 */
export interface Column {
    /**
     * Position in parent
     * @type {number}
     * @memberof Column
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof Column
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof Column
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof Column
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof Column
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Column
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Column
     */
    'type'?: ColumnTypeEnum;
    /**
     * Value for selections. In other types of questions is used as metadata to generate reports.
     * @type {string}
     * @memberof Column
     */
    'value'?: string;
    /**
     * Default answer. In Selection questions use the column code to set it as selected.
     * @type {string}
     * @memberof Column
     */
    'default_value'?: string;
}

export const ColumnTypeEnum = {
    Column: 'column'
} as const;

export type ColumnTypeEnum = typeof ColumnTypeEnum[keyof typeof ColumnTypeEnum];

/**
 * 
 * @export
 * @interface ColumnGroup
 */
export interface ColumnGroup {
    /**
     * Position in parent
     * @type {number}
     * @memberof ColumnGroup
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof ColumnGroup
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof ColumnGroup
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof ColumnGroup
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof ColumnGroup
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ColumnGroup
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ColumnGroup
     */
    'type'?: ColumnGroupTypeEnum;
    /**
     * 
     * @type {Array<Column>}
     * @memberof ColumnGroup
     */
    'children'?: Array<Column>;
}

export const ColumnGroupTypeEnum = {
    ColumnGroup: 'column_group'
} as const;

export type ColumnGroupTypeEnum = typeof ColumnGroupTypeEnum[keyof typeof ColumnGroupTypeEnum];

/**
 * 
 * @export
 * @interface ColumnsInner
 */
export interface ColumnsInner {
    /**
     * Position in parent
     * @type {number}
     * @memberof ColumnsInner
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof ColumnsInner
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof ColumnsInner
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof ColumnsInner
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof ColumnsInner
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ColumnsInner
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ColumnsInner
     */
    'type'?: ColumnsInnerTypeEnum;
    /**
     * Value for selections. In other types of questions is used as metadata to generate reports.
     * @type {string}
     * @memberof ColumnsInner
     */
    'value'?: string;
    /**
     * Default answer. In Selection questions use the column code to set it as selected.
     * @type {string}
     * @memberof ColumnsInner
     */
    'default_value'?: string;
    /**
     * 
     * @type {Array<Column>}
     * @memberof ColumnsInner
     */
    'children'?: Array<Column>;
}

export const ColumnsInnerTypeEnum = {
    ColumnGroup: 'column_group'
} as const;

export type ColumnsInnerTypeEnum = typeof ColumnsInnerTypeEnum[keyof typeof ColumnsInnerTypeEnum];

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Iterate
 */
export interface Iterate {
    /**
     * Position in parent
     * @type {number}
     * @memberof Iterate
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof Iterate
     */
    'keep_position'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Iterate
     */
    'type'?: IterateTypeEnum;
    /**
     * Unique code across the questionnaires
     * @type {string}
     * @memberof Iterate
     */
    'code': string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof Iterate
     */
    'label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Iterate
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {Array<Iteration>}
     * @memberof Iterate
     */
    'iterations'?: Array<Iteration>;
    /**
     * 
     * @type {Array<ChildrenInner>}
     * @memberof Iterate
     */
    'children'?: Array<ChildrenInner>;
}

export const IterateTypeEnum = {
    Iterate: 'iterate'
} as const;

export type IterateTypeEnum = typeof IterateTypeEnum[keyof typeof IterateTypeEnum];

/**
 * 
 * @export
 * @interface Iteration
 */
export interface Iteration {
    /**
     * Position in parent
     * @type {number}
     * @memberof Iteration
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof Iteration
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof Iteration
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof Iteration
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof Iteration
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Iteration
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {Value}
     * @memberof Iteration
     */
    'value'?: Value;
}
/**
 * 
 * @export
 * @interface ListMetadataSchema
 */
export interface ListMetadataSchema {
    /**
     * 
     * @type {number}
     * @memberof ListMetadataSchema
     */
    'current_page': number;
    /**
     * 
     * @type {number}
     * @memberof ListMetadataSchema
     */
    'previous_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListMetadataSchema
     */
    'next_page'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListMetadataSchema
     */
    'last_page': number;
    /**
     * 
     * @type {number}
     * @memberof ListMetadataSchema
     */
    'total_records': number;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface NumericQuestion
 */
export interface NumericQuestion {
    /**
     * Position in parent
     * @type {number}
     * @memberof NumericQuestion
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the questionnaires
     * @type {string}
     * @memberof NumericQuestion
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof NumericQuestion
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof NumericQuestion
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NumericQuestion
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'required'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'virtual'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'randomize_columns'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'randomize_subquestions'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'randomize_subquestions_in_group'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'randomize_columns_in_group'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NumericQuestion
     */
    'ui_widget'?: string;
    /**
     * 
     * @type {Array<SubquestionsInner>}
     * @memberof NumericQuestion
     */
    'subquestions'?: Array<SubquestionsInner>;
    /**
     * 
     * @type {Array<ColumnsInner>}
     * @memberof NumericQuestion
     */
    'columns'?: Array<ColumnsInner>;
    /**
     * Default value for simple questions. For simple Selection question set the code of the question.
     * @type {string}
     * @memberof NumericQuestion
     */
    'default_value'?: string;
    /**
     *          Apply only if question is not required.         Minimal subquestions with answers filled/selected required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` and `required` will require at          least 1 selection         
     * @type {number}
     * @memberof NumericQuestion
     */
    'min_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Maximal subquestions with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof NumericQuestion
     */
    'max_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Fixed number of subquestions with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof NumericQuestion
     */
    'fixed_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Minimal columns with answers filled/selected required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` and `required` will require at          least 1 selection         
     * @type {number}
     * @memberof NumericQuestion
     */
    'min_column_answers'?: number;
    /**
     *          Apply only if question is not required.         Maximal columns with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof NumericQuestion
     */
    'max_column_answers'?: number;
    /**
     *          Apply only if question is not required.         Fixed number of column with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof NumericQuestion
     */
    'fixed_column_answers'?: number;
    /**
     * 
     * @type {string}
     * @memberof NumericQuestion
     */
    'type'?: NumericQuestionTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof NumericQuestion
     */
    'min'?: number;
    /**
     * 
     * @type {number}
     * @memberof NumericQuestion
     */
    'max'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof NumericQuestion
     */
    'decimal'?: boolean;
    /**
     * This option is used to round the values if `decimal` option is set true. If `null` rounding is not apply
     * @type {number}
     * @memberof NumericQuestion
     */
    'number_of_decimals'?: number;
    /**
     * 
     * @type {string}
     * @memberof NumericQuestion
     */
    'round_to'?: NumericQuestionRoundToEnum;
}

export const NumericQuestionTypeEnum = {
    Numeric: 'numeric'
} as const;

export type NumericQuestionTypeEnum = typeof NumericQuestionTypeEnum[keyof typeof NumericQuestionTypeEnum];
export const NumericQuestionRoundToEnum = {
    Up: 'up',
    Down: 'down'
} as const;

export type NumericQuestionRoundToEnum = typeof NumericQuestionRoundToEnum[keyof typeof NumericQuestionRoundToEnum];

/**
 * 
 * @export
 * @interface OperationResponse
 */
export interface OperationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof OperationResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OperationResponse
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface Questionnaire
 */
export interface Questionnaire {
    /**
     * Code to identify the questionnaires
     * @type {string}
     * @memberof Questionnaire
     */
    'code': string;
    /**
     * BaseQuestionnaire title
     * @type {string}
     * @memberof Questionnaire
     */
    'title': string;
    /**
     * BaseQuestionnaire alternative title
     * @type {string}
     * @memberof Questionnaire
     */
    'alt_title'?: string;
    /**
     * BaseQuestionnaire description
     * @type {string}
     * @memberof Questionnaire
     */
    'description'?: string;
    /**
     * 
     * @type {Array<ChildrenInner>}
     * @memberof Questionnaire
     */
    'children'?: Array<ChildrenInner>;
    /**
     * 
     * @type {string}
     * @memberof Questionnaire
     */
    'uuid'?: string;
}
/**
 * 
 * @export
 * @interface QuestionnaireListResponseSchema
 */
export interface QuestionnaireListResponseSchema {
    /**
     * 
     * @type {Array<Questionnaire>}
     * @memberof QuestionnaireListResponseSchema
     */
    'data': Array<Questionnaire>;
    /**
     * 
     * @type {ListMetadataSchema}
     * @memberof QuestionnaireListResponseSchema
     */
    'meta_data'?: ListMetadataSchema;
}
/**
 * 
 * @export
 * @interface SelectionQuestion
 */
export interface SelectionQuestion {
    /**
     * Position in parent
     * @type {number}
     * @memberof SelectionQuestion
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the questionnaires
     * @type {string}
     * @memberof SelectionQuestion
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof SelectionQuestion
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof SelectionQuestion
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SelectionQuestion
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'required'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'virtual'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'randomize_columns'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'randomize_subquestions'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'randomize_subquestions_in_group'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'randomize_columns_in_group'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SelectionQuestion
     */
    'ui_widget'?: string;
    /**
     * 
     * @type {Array<SubquestionsInner>}
     * @memberof SelectionQuestion
     */
    'subquestions'?: Array<SubquestionsInner>;
    /**
     * 
     * @type {Array<ColumnsInner>}
     * @memberof SelectionQuestion
     */
    'columns'?: Array<ColumnsInner>;
    /**
     * Default value for simple questions. For simple Selection question set the code of the question.
     * @type {string}
     * @memberof SelectionQuestion
     */
    'default_value'?: string;
    /**
     *          Apply only if question is not required.         Minimal subquestions with answers filled/selected required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` and `required` will require at          least 1 selection         
     * @type {number}
     * @memberof SelectionQuestion
     */
    'min_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Maximal subquestions with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof SelectionQuestion
     */
    'max_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Fixed number of subquestions with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof SelectionQuestion
     */
    'fixed_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Minimal columns with answers filled/selected required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` and `required` will require at          least 1 selection         
     * @type {number}
     * @memberof SelectionQuestion
     */
    'min_column_answers'?: number;
    /**
     *          Apply only if question is not required.         Maximal columns with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof SelectionQuestion
     */
    'max_column_answers'?: number;
    /**
     *          Apply only if question is not required.         Fixed number of column with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof SelectionQuestion
     */
    'fixed_column_answers'?: number;
    /**
     * 
     * @type {string}
     * @memberof SelectionQuestion
     */
    'type'?: SelectionQuestionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof SelectionQuestion
     */
    'multi_selection'?: boolean;
}

export const SelectionQuestionTypeEnum = {
    Selection: 'selection'
} as const;

export type SelectionQuestionTypeEnum = typeof SelectionQuestionTypeEnum[keyof typeof SelectionQuestionTypeEnum];

/**
 * 
 * @export
 * @interface SetOfElements
 */
export interface SetOfElements {
    /**
     * Position in parent
     * @type {number}
     * @memberof SetOfElements
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof SetOfElements
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof SetOfElements
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof SetOfElements
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof SetOfElements
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SetOfElements
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SetOfElements
     */
    'type'?: SetOfElementsTypeEnum;
    /**
     * 
     * @type {Array<ChildrenInner>}
     * @memberof SetOfElements
     */
    'children'?: Array<ChildrenInner>;
}

export const SetOfElementsTypeEnum = {
    Set: 'set'
} as const;

export type SetOfElementsTypeEnum = typeof SetOfElementsTypeEnum[keyof typeof SetOfElementsTypeEnum];

/**
 * 
 * @export
 * @interface Subquestion
 */
export interface Subquestion {
    /**
     * Position in parent
     * @type {number}
     * @memberof Subquestion
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof Subquestion
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof Subquestion
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof Subquestion
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof Subquestion
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Subquestion
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Subquestion
     */
    'type'?: SubquestionTypeEnum;
    /**
     * Value for selections when there are not columns assigned to the question. In other types of questions is used as metadata to generate reports.
     * @type {string}
     * @memberof Subquestion
     */
    'value'?: string;
    /**
     * Default answer when there are not columns assigned to the question. In Selection questions use the subquestion code to set it as selected.
     * @type {string}
     * @memberof Subquestion
     */
    'default_value'?: string;
}

export const SubquestionTypeEnum = {
    Subquestion: 'subquestion'
} as const;

export type SubquestionTypeEnum = typeof SubquestionTypeEnum[keyof typeof SubquestionTypeEnum];

/**
 * 
 * @export
 * @interface SubquestionGroup
 */
export interface SubquestionGroup {
    /**
     * Position in parent
     * @type {number}
     * @memberof SubquestionGroup
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof SubquestionGroup
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof SubquestionGroup
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof SubquestionGroup
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof SubquestionGroup
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SubquestionGroup
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SubquestionGroup
     */
    'type'?: SubquestionGroupTypeEnum;
    /**
     * 
     * @type {Array<Subquestion>}
     * @memberof SubquestionGroup
     */
    'children'?: Array<Subquestion>;
}

export const SubquestionGroupTypeEnum = {
    SubquestionGroup: 'subquestion_group'
} as const;

export type SubquestionGroupTypeEnum = typeof SubquestionGroupTypeEnum[keyof typeof SubquestionGroupTypeEnum];

/**
 * 
 * @export
 * @interface SubquestionsInner
 */
export interface SubquestionsInner {
    /**
     * Position in parent
     * @type {number}
     * @memberof SubquestionsInner
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof SubquestionsInner
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the question
     * @type {string}
     * @memberof SubquestionsInner
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof SubquestionsInner
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof SubquestionsInner
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SubquestionsInner
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SubquestionsInner
     */
    'type'?: SubquestionsInnerTypeEnum;
    /**
     * Value for selections when there are not columns assigned to the question. In other types of questions is used as metadata to generate reports.
     * @type {string}
     * @memberof SubquestionsInner
     */
    'value'?: string;
    /**
     * Default answer when there are not columns assigned to the question. In Selection questions use the subquestion code to set it as selected.
     * @type {string}
     * @memberof SubquestionsInner
     */
    'default_value'?: string;
    /**
     * 
     * @type {Array<Subquestion>}
     * @memberof SubquestionsInner
     */
    'children'?: Array<Subquestion>;
}

export const SubquestionsInnerTypeEnum = {
    SubquestionGroup: 'subquestion_group'
} as const;

export type SubquestionsInnerTypeEnum = typeof SubquestionsInnerTypeEnum[keyof typeof SubquestionsInnerTypeEnum];

/**
 * 
 * @export
 * @interface TextQuestion
 */
export interface TextQuestion {
    /**
     * Position in parent
     * @type {number}
     * @memberof TextQuestion
     */
    'position': number;
    /**
     * Keep the position if the parent try to randomize the element
     * @type {boolean}
     * @memberof TextQuestion
     */
    'keep_position'?: boolean;
    /**
     * Unique code across the questionnaires
     * @type {string}
     * @memberof TextQuestion
     */
    'code': string;
    /**
     * Label to show to respondent
     * @type {string}
     * @memberof TextQuestion
     */
    'label'?: string;
    /**
     * Label to show in reports and backoffice
     * @type {string}
     * @memberof TextQuestion
     */
    'alt_label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TextQuestion
     */
    'tag'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestion
     */
    'required'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestion
     */
    'virtual'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestion
     */
    'randomize_columns'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestion
     */
    'randomize_subquestions'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestion
     */
    'randomize_subquestions_in_group'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TextQuestion
     */
    'randomize_columns_in_group'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TextQuestion
     */
    'ui_widget'?: string;
    /**
     * 
     * @type {Array<SubquestionsInner>}
     * @memberof TextQuestion
     */
    'subquestions'?: Array<SubquestionsInner>;
    /**
     * 
     * @type {Array<ColumnsInner>}
     * @memberof TextQuestion
     */
    'columns'?: Array<ColumnsInner>;
    /**
     * Default value for simple questions. For simple Selection question set the code of the question.
     * @type {string}
     * @memberof TextQuestion
     */
    'default_value'?: string;
    /**
     *          Apply only if question is not required.         Minimal subquestions with answers filled/selected required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` and `required` will require at          least 1 selection         
     * @type {number}
     * @memberof TextQuestion
     */
    'min_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Maximal subquestions with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof TextQuestion
     */
    'max_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Fixed number of subquestions with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof TextQuestion
     */
    'fixed_subquestion_answers'?: number;
    /**
     *          Apply only if question is not required.         Minimal columns with answers filled/selected required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` and `required` will require at          least 1 selection         
     * @type {number}
     * @memberof TextQuestion
     */
    'min_column_answers'?: number;
    /**
     *          Apply only if question is not required.         Maximal columns with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof TextQuestion
     */
    'max_column_answers'?: number;
    /**
     *          Apply only if question is not required.         Fixed number of column with answers required.         In `SelectionQuestion` only apply if `multi_selection` is enabled, if `null` no limit is apply         
     * @type {number}
     * @memberof TextQuestion
     */
    'fixed_column_answers'?: number;
    /**
     * 
     * @type {string}
     * @memberof TextQuestion
     */
    'type'?: TextQuestionTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TextQuestion
     */
    'min_length'?: number;
    /**
     * 
     * @type {number}
     * @memberof TextQuestion
     */
    'max_length'?: number;
    /**
     * 
     * @type {string}
     * @memberof TextQuestion
     */
    'regex'?: string;
}

export const TextQuestionTypeEnum = {
    Text: 'text'
} as const;

export type TextQuestionTypeEnum = typeof TextQuestionTypeEnum[keyof typeof TextQuestionTypeEnum];

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * Value assigned to this iteration
 * @export
 * @interface Value
 */
export interface Value {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QuestionnaireApi - axios parameter creator
 * @export
 */
export const QuestionnaireApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Questionnaire
         * @param {BaseQuestionnaire} baseQuestionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionnaire: async (baseQuestionnaire: BaseQuestionnaire, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseQuestionnaire' is not null or undefined
            assertParamExists('createQuestionnaire', 'baseQuestionnaire', baseQuestionnaire)
            const localVarPath = `/questionnaire/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseQuestionnaire, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Questionnaire
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionnaire: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('deleteQuestionnaire', 'uuid', uuid)
            const localVarPath = `/questionnaire/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaire: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('getQuestionnaire', 'uuid', uuid)
            const localVarPath = `/questionnaire/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questionnaires
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaires: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/questionnaire/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Simulate Call
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateCall: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('simulateCall', 'uuid', uuid)
            const localVarPath = `/questionnaire/simulations/call/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Questionnaire
         * @param {string} uuid 
         * @param {BaseQuestionnaire} baseQuestionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionnaire: async (uuid: string, baseQuestionnaire: BaseQuestionnaire, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('updateQuestionnaire', 'uuid', uuid)
            // verify required parameter 'baseQuestionnaire' is not null or undefined
            assertParamExists('updateQuestionnaire', 'baseQuestionnaire', baseQuestionnaire)
            const localVarPath = `/questionnaire/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseQuestionnaire, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionnaireApi - functional programming interface
 * @export
 */
export const QuestionnaireApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionnaireApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Questionnaire
         * @param {BaseQuestionnaire} baseQuestionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionnaire(baseQuestionnaire: BaseQuestionnaire, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionnaire(baseQuestionnaire, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Questionnaire
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestionnaire(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionnaire(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionnaire(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaire(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Questionnaires
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionnaires(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionnaireListResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaires(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Simulate Call
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulateCall(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulateCall(uuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Questionnaire
         * @param {string} uuid 
         * @param {BaseQuestionnaire} baseQuestionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionnaire(uuid: string, baseQuestionnaire: BaseQuestionnaire, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionnaire(uuid, baseQuestionnaire, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QuestionnaireApi - factory interface
 * @export
 */
export const QuestionnaireApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionnaireApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Questionnaire
         * @param {BaseQuestionnaire} baseQuestionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionnaire(baseQuestionnaire: BaseQuestionnaire, options?: any): AxiosPromise<Questionnaire> {
            return localVarFp.createQuestionnaire(baseQuestionnaire, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Questionnaire
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionnaire(uuid: string, options?: any): AxiosPromise<OperationResponse> {
            return localVarFp.deleteQuestionnaire(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Questionnaire
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaire(uuid: string, options?: any): AxiosPromise<Questionnaire> {
            return localVarFp.getQuestionnaire(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Questionnaires
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaires(page?: number, pageSize?: number, options?: any): AxiosPromise<QuestionnaireListResponseSchema> {
            return localVarFp.getQuestionnaires(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Simulate Call
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateCall(uuid: string, options?: any): AxiosPromise<Questionnaire> {
            return localVarFp.simulateCall(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Questionnaire
         * @param {string} uuid 
         * @param {BaseQuestionnaire} baseQuestionnaire 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionnaire(uuid: string, baseQuestionnaire: BaseQuestionnaire, options?: any): AxiosPromise<Questionnaire> {
            return localVarFp.updateQuestionnaire(uuid, baseQuestionnaire, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionnaireApi - object-oriented interface
 * @export
 * @class QuestionnaireApi
 * @extends {BaseAPI}
 */
export class QuestionnaireApi extends BaseAPI {
    /**
     * 
     * @summary Create Questionnaire
     * @param {BaseQuestionnaire} baseQuestionnaire 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApi
     */
    public createQuestionnaire(baseQuestionnaire: BaseQuestionnaire, options?: AxiosRequestConfig) {
        return QuestionnaireApiFp(this.configuration).createQuestionnaire(baseQuestionnaire, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Questionnaire
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApi
     */
    public deleteQuestionnaire(uuid: string, options?: AxiosRequestConfig) {
        return QuestionnaireApiFp(this.configuration).deleteQuestionnaire(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Questionnaire
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApi
     */
    public getQuestionnaire(uuid: string, options?: AxiosRequestConfig) {
        return QuestionnaireApiFp(this.configuration).getQuestionnaire(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Questionnaires
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApi
     */
    public getQuestionnaires(page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return QuestionnaireApiFp(this.configuration).getQuestionnaires(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Simulate Call
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApi
     */
    public simulateCall(uuid: string, options?: AxiosRequestConfig) {
        return QuestionnaireApiFp(this.configuration).simulateCall(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Questionnaire
     * @param {string} uuid 
     * @param {BaseQuestionnaire} baseQuestionnaire 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionnaireApi
     */
    public updateQuestionnaire(uuid: string, baseQuestionnaire: BaseQuestionnaire, options?: AxiosRequestConfig) {
        return QuestionnaireApiFp(this.configuration).updateQuestionnaire(uuid, baseQuestionnaire, options).then((request) => request(this.axios, this.basePath));
    }
}


